use warnings;
use strict;

use lib 'lib';
use Text::ePub::Parser;

my $epub = shift @ARGV; 
my $target = shift @ARGV;

die "The target directory already exists " if -e $target;
die "$0 foo.epub some_out_directory_to_create" unless ($epub && $target);
my $parser = Text::ePub::Parser->new();

$parser->read_epub($epub);

my $toc = generate_toc($parser);





my $out = qq{<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>};


$out .= front_matter($parser);

$out .= $toc;

    my @entries = @{$parser->toc->entries};
    for my $id  (0..($#entries)) {
        my $entry = $entries[$id];
        my $href = $entry->{href};

        my $content = Text::ePub::HTMLContent->new( epub => $parser, filename => $parser->content_prefix. $href );
        $content->load();
   
    
   $out .= qq{<a name="@{[$entry->{id}]}"/><span id="epub2html-@{[$entry->{id}]}"> };
        $out .= '<div class="nav">';
        $out .= qq{<a href="#@{[$entries[$id-1]->{id}]}">Previous (@{[$entries[$id-1]->{label}]})</a>} if ($id); #skip 1
        $out .= ' <a href="#toc">Table of contents</a>';
        $out .= qq{ <a href="#@{[$entries[$id+1]->{id}]}">Next (@{[$entries[$id+1]->{label}]})</a>} if (exists $entries[$id+1]);
        $out .= "</nav>"; 
    my $html= $content->raw_content();


#<!DOCTYPE html [
#<!ENTITY D "&#x2014;">
#<!ENTITY o "&#x2018;">
#<!ENTITY c "&#x2019;">
#<!ENTITY O "&#x201C;">
#<!ENTITY C "&#x201D;">
#]>
#


   while ($html =~ /<!ENTITY\s+(.*?)\s+"(.*?)">/gim) {
        my $from = $1;
        my $to = $2;
        warn "From $from to $to";
        $html =~ s/&$from;/$to/g;
    }


        $html =~ s!^\s*(<.*?)?<html.*?>.*?<body.*?>!!is;
        $html =~ s!^\s*<html.*?>.*?<body.*?>!!is;
        $html =~ s!</body.*?>.*?</html.*>\s*$!!is; 
        $out .=  $html;
        $out .= "\n</span>\n";

}

$out .= "</body></html>";


mkdir($target) || die $!;
open (my $outfile, ">$target/index.html") || die $!;
print $outfile $out;
close($outfile);

my $content_files = $parser->manifest->content;
for my $item (keys %$content_files) {
    next unless ($content_files->{$item}->{media_type} =~ /image/);
    my $file = $content_files->{$item}->{href};
    if ($file =~ m|^(.*)/.*?$|) {
        my $subdir = $1;
        `mkdir -p $target/$subdir`;
    } 
    warn "Writing image $item" ."to ". $target."/".$file;
    open  (my $imgout , ">",  $target."/".$file) || die "Couldn't open image: ". $!;
    print $imgout $parser->zip->contents($parser->content_prefix.$content_files->{$item}->{href}) || die " no writey $!";
    close $imgout;
}




sub debug {
    warn join(',',@_)."\n";
}


sub generate_toc{
    my $parser = shift;

    my $out =  q{<a name="toc"><h2>Table of contents</h2>};
    $out .=  qq{<ul class="toc">\n};
    foreach my $entry (@{$parser->toc->entries}) {
        $out .= qq{<li><a href="#@{[ $entry->{id}]}">@{[$entry->{label}]}</a></li>\n}
    }
    $out .= "</ul>\n";

    return $out;
}


sub front_matter {
    my $parser = shift;


    return qq{<h1>@{[$parser->manifest->title]}</h1>\n\n
    <h2>@{[$parser->manifest->author]}</h2>\n\n
    <p style="page-break-before: always"/>};

}
