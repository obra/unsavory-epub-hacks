#!/usr/bin/env perl
use warnings;
use strict;
use File::Temp qw/tempdir/;
use lib 'lib';
use Text::ePub::Parser;
use Getopt::Long;
sub verbose;    # predeclare with null prototype. awful hack so we can say warn 'foo' if verbose;

my %args = ();
GetOptions(\%args, (
    'source|s=s',
    'target|t=s',
    'verbose|v'
));


my $epub   = $args{source};
my $target = $args{target};

unless ($epub && -e $epub) { 
    usage();
    exit(-1);

}

if ($target && -e $target ) {
    warn "The target you specified exists already. please point to an empty directory";
    usage();
    exit -1;
} elsif ($target) {
    mkdir ($target) || die $!;
} else {
    $target = tempdir( CLEANUP => 0);
    print "Your raw html will be written to $target\n";
}

my $parser = Text::ePub::Parser->new();

unless ($parser->read_epub($epub)) {
    die "Something bad happened while trying to read your book: $@";
}

my $html_header = 
my $out = 
build_html_header().
"<body>"
. sectionize(front_matter($parser))
. sectionize(generate_toc($parser))
. sectionize(extract_chapters($parser))
. "</body></html>";

open( my $outfile, ">$target/index.html" ) || die $!;
print $outfile $out;
close($outfile);

extract_images($parser);

sub sectionize {
    my $content = shift;
    return "<mbp:section>".$content."</mbp:section>";
}

sub flatten_toc {
    my $entries= shift;
    my @flat;
    for my $e (@$entries) {
        push @flat, $e;
        if (ref $e->{kids}) {
            push @flat, flatten_toc($e->{kids});
        }
    }

    return @flat;
}


sub extract_chapters {
    my $parser  = shift;
    my @entries = flatten_toc($parser->toc->entries);
    my $out     = '<a name="chapters"></a>';
    for my $id ( 0 .. ($#entries) ) {
        $out     .= qq{<a name="@{[$entries[$id]->{id}]}"><!-- Chapter --></a>};
        if ( my $filename  = $entries[$id]->{file} ) {
        my $content = Text::ePub::HTMLContent->new(
            epub     => $parser,
            filename => $parser->content_prefix . $filename
        );
        $content->load();
        $out .= warp_xhtml_to_html_section( $content->content_utf8() );

        $out .= build_chapter_nav( $id, \@entries );
        $out .= qq{    <p style="page-break-before: always"/> };
        }
    }
    return $out;
}

sub build_chapter_nav {
    my $id      = shift;
    my @entries = @{ shift @_ };
    my $entry   = $entries[$id];
    my $out = '<div class="nav">';
    $out .= qq{<a href="#@{[$entries[$id-1]->{id}]}">Previous (@{[$entries[$id-1]->{label}]})</a>}
        if ($id);    #skip 1
    $out .= ' <a href="#contents">Table of contents</a>';
    $out .= qq{ <a href="#@{[$entries[$id+1]->{id}]}">Next (@{[$entries[$id+1]->{label}]})</a>}
        if ( exists $entries[ $id + 1 ] );
    $out .= "</div>";

}

sub generate_toc {
    my $parser = shift;

	warn YAML::Dump($parser->toc->entries); use YAML;
    my $out = q{<div id="toc"><a name="contents"><h2>Table of contents</h2></a>}.
       sub_toc ($parser->toc->entries)
       ."</div>";
    return $out;
    
}

sub sub_toc {
    my $items = shift;
    my $out;
    $out .= qq{<ul class="contents">\n};
    foreach my $entry ( @{ $items } ) {
        $out .= qq{<li><a href="#@{[ $entry->{id}]}">@{[$entry->{label}]}</a>};

    $out .= sub_toc($entry->{kids}  )   if (ref $entry->{kids});



    $out .= qq{</li>\n};
    }
    $out .= "</ul>\n";

    return $out;
}

sub front_matter {
    my $parser = shift;

    return qq{
    

    
    <div id="cover">&nbsp;</div>
    <div name="title">
        <center><h1 class="title">@{[$parser->manifest->title]}</h1></center>
    </div>
    <p style="page-break-before: always"/>
    <div name="author">
        <center><h2 class="author">@{[$parser->manifest->author]}</h2></center>
    </div>
    <p style="page-break-before: always"/>
};

}

sub build_html_header {

    my $out
        = qq{<html>
<head>
    <title>@{[$parser->manifest->title]}</title>
    <dc:author>@{[$parser->manifest->author]}</dc:author>
   <guide>
     <reference type="toc" title="Table of Contents" href="#contents"></reference> 
    </guide>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
};

    return $out;
}

sub warp_xhtml_to_html_section {
    my $html = shift;

 # XHTML DTD might encode entities like this. if we were professionals, we'd use a real xhtml parser

    #<!DOCTYPE html [
    #<!ENTITY D "&#x2014;">
    #<!ENTITY o "&#x2018;">
    #<!ENTITY c "&#x2019;">
    #<!ENTITY O "&#x201C;">
    #<!ENTITY C "&#x201D;">
    #]>
    #

    # instead, we wrote a regex in 90 seconds
    while ( $html =~ /<!ENTITY\s+(.*?)\s+"(.*?)">/gim ) {
        my $from = $1;
        my $to   = $2;
        $html =~ s/&$from;/$to/g;
    }

    $html =~ s!^\s*(<.*?)?<html.*?>.*?<body.*?>!!is;
    $html =~ s!^\s*<html.*?>.*?<body.*?>!!is;
    $html =~ s!</body.*?>.*?</html.*>\s*$!!is;

    return $html;
}

sub extract_images {
    my $parser        = shift;
    my $content_files = $parser->manifest->content;
    for my $item ( keys %$content_files ) {
        my $media_type = $content_files->{$item}->{media_type};
        my $file = $content_files->{$item}->{file};
        next unless (( $media_type && $media_type =~ /(?:image|css)/i ) ||
                      ( $file && $file =~ /(?:jpe?g|png|gif|tiff?|bmp|css)$/i));
       
        # this is an awful, awful hack to try to write out collateral files
        # that start out at the same base level as document content 
        # into the same directory as our eventual index.html 
        
        # This deals with:
        # ../t/bookworm_test_data/invalid_å¤©.epub

        # the adobe alice book doesn't want or need this.
        # The right solution probably involves parsing the html, finding a list of images it wants and trying to match them. I don't feel like doing that for a proof of concept.
        
        my $ch0_path = $parser->toc->entries->[0]->{file};
        $ch0_path =~ s|/(.+)?$|/|;

        my $out_path = $file;

        $out_path =~ s/^$ch0_path//;   
 
        if ( $out_path =~ m|^(.*)/.+$| ) {
            my $subdir = $1;
            `mkdir -p $target/$subdir`;
        }
        warn "Writing image $item from ".$parser->content_prefix."($file) " . "to  $target/" . $out_path  if verbose;
        open( my $imgout, ">", $target . "/" . $out_path ) || die "Couldn't open image output file $out_path in $target: " . $!;
        print $imgout $parser->zip->contents( $parser->content_prefix . $file )
            || die " no writey $!";
        close $imgout;
    }

}

sub usage {
print <<EOF;

$0 --source /home/lcarroll/from-publisher/alice.epub --target /home/lcarroll/alice.html --verbose

EOF
}


sub verbose {
    $ENV{'EPUB2HTML_VERBOSE'} ? 1 : 0;
}
